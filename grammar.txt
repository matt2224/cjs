root_defs -> function_def root_defs
           | enum_def root_defs
           | <epsilon>
enum_def -> enum { enum_list_item enum_list_cont }
enum_list_item -> id
enum_list_cont -> , enum_list_item enum_list_cont
               | <epsilon>
function_def -> type id ( arg_list ) { stmt_list }
param_list -> param_list_item param_list_cont
           | <epsilon>
param_list_cont -> , param_list_item param_list_cont
               | <epsilon>
param_list_item -> type id param_list_item_cont
param_list_item_cont -> []
                     | <epsilon>
stmt_list -> stmt ; stmt_list
             | <epsilon>
stmt -> return expr
      | type id var_dec_cont
      | expr
      | for (expr ; expr ; expr)
      | while ( expr ) { stmt_list }
      | do { stmt_list } while ( expr )
var_dec_cont -> = expr
              | [ num ]
              | <epsilon>
arg_list -> arg_list_item arg_list_cont
           | <epsilon>
arg_list_cont -> , arg_list_item arg_list_cont
               | <epsilon>
arg_list_item -> expr
array_init_list -> array_init_list_item array_init_list_cont
array_init_list_item -> expr
array_init_list_cont -> , array_init_list_item array_init_list_cont
                      | <epsilon>
expr -> expr_part expr_cont
expr_cont -> == expr_part
           | > expr_part
           | < expr_part
           | >= expr_part
           | <= expr_part
           | <epsilon>
expr_part -> num
        | string
        | { array_init_list }
        | -- id
        | ++ id
        | id id_expr_cont
id_expr_cont -> ( arg_list )
              | ++
              | --
              | [ expr ]  
              | epsilon
type -> int | char | void